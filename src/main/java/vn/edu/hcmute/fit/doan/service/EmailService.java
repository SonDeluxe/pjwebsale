package vn.edu.hcmute.fit.doan.service;

import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.json.gson.GsonFactory;
import com.google.api.services.gmail.Gmail;
import com.google.api.services.gmail.model.Message;
import org.apache.commons.codec.binary.Base64;
import jakarta.mail.Session;
import jakarta.mail.internet.InternetAddress;
import jakarta.mail.internet.MimeMessage;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Properties;

public class EmailService {

    private static final String APPLICATION_NAME = "DoAnTotNghiep App";

    // ‚úÖ Ki·ªÉm tra v√† tr·∫£ v·ªÅ Credential h·ª£p l·ªá
    public static Credential getCredentials() throws IOException {
        try {
            Credential credential = GoogleAuthService.getFlow().loadCredential("user");

            if (credential == null || credential.getAccessToken() == null ||
                    (credential.getExpiresInSeconds() != null && credential.getExpiresInSeconds() <= 60)) {
                throw new IOException("Gmail ch∆∞a ƒë∆∞·ª£c c·∫•p quy·ªÅn.");
            }

            return credential;
        } catch (IOException e) {
            throw e; // n√©m l·∫°i ƒë·ªÉ servlet x·ª≠ l√Ω
        } catch (Exception e) {
            throw new IOException("L·ªói khi l·∫•y Credential Gmail.", e);
        }
    }

    // ‚úÖ T·∫°o email MIME
    private static MimeMessage createEmail(String to, String subject, String bodyText) throws Exception {
        Properties props = new Properties();
        Session session = Session.getDefaultInstance(props, null);
        MimeMessage email = new MimeMessage(session);
        email.setFrom(new InternetAddress("me"));
        email.addRecipient(jakarta.mail.Message.RecipientType.TO, new InternetAddress(to));
        email.setSubject(subject, "UTF-8");
        email.setText(bodyText, "UTF-8");
        return email;
    }

    // ‚úÖ M√£ h√≥a email th√†nh Message Gmail
    private static Message createMessageWithEmail(MimeMessage emailContent) throws Exception {
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        emailContent.writeTo(buffer);
        byte[] bytes = buffer.toByteArray();
        String encodedEmail = Base64.encodeBase64URLSafeString(bytes);
        Message message = new Message();
        message.setRaw(encodedEmail);
        return message;
    }

    // ‚úÖ G·ª≠i email OTP ‚Äî n√©m IOException n·∫øu Gmail ch∆∞a x√°c th·ª±c
    public static void sendOtpEmail(String recipientEmail, String otp) throws IOException {
        try {
            Credential credential = getCredentials();

            Gmail service = new Gmail.Builder(
                    GoogleNetHttpTransport.newTrustedTransport(),
                    GsonFactory.getDefaultInstance(),
                    credential)
                    .setApplicationName(APPLICATION_NAME)
                    .build();

            String subject = "Y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u Honda";
            String bodyText = "Xin ch√†o,\n\n"
                    + "B·∫°n v·ª´a y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n Honda c·ªßa m√¨nh.\n"
                    + "üîê M√£ OTP c·ªßa b·∫°n l√†: " + otp + "\n\n"
                    + "‚è∞ M√£ n√†y s·∫Ω h·∫øt h·∫°n sau 15 ph√∫t.\n"
                    + "Vui l√≤ng kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai.\n\n"
                    + "Tr√¢n tr·ªçng,\nƒê·ªôi ng≈© Honda.";

            MimeMessage mimeMessage = createEmail(recipientEmail, subject, bodyText);
            Message message = createMessageWithEmail(mimeMessage);
            service.users().messages().send("me", message).execute();

            System.out.println("‚úÖ G·ª≠i email API th√†nh c√¥ng ƒë·∫øn " + recipientEmail);

        } catch (IOException e) {
            throw e; // Gmail ch∆∞a x√°c th·ª±c ‚Üí ƒë·ªÉ servlet x·ª≠ l√Ω
        } catch (Exception e) {
            throw new IOException("L·ªói khi g·ª≠i email qua Gmail API.", e);
        }
    }
}